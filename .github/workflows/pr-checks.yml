name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npx tsc --noEmit

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          echo "Build successful - dist directory created"

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  #      - name: Install SQLite3
  #        run: |
  #          sudo apt-get update
  #          sudo apt-get install -y sqlite3
  #
  #      - name: Install Playwright browsers
  #        run: |
  #          npx playwright install --with-deps
  #          npx playwright install chromium
  #          npx playwright install firefox
  #          npx playwright install webkit
  #
  #      - name: Verify Playwright installation
  #        run: npx playwright --version
  #
  #      - name: Setup test environment
  #        run: |
  #          # Create a test environment file
  #          echo "AUTH_SECRET=test-secret-key-for-e2e-testing" > .env.test
  #          echo "AUTH_TRUST_HOST=true" >> .env.test
  #          echo "NODE_ENV=test" >> .env.test
  #          echo "GOOGLE_CLIENT_ID=test-client-id" >> .env.test
  #          echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> .env.test
  #
  #      - name: Setup test database
  #        run: |
  #          # Create a simple SQLite database for testing
  #          sqlite3 test.db < src/db/migrations/consolidated_setup.sql || echo "Database setup completed"
  #
  #      - name: Run E2E tests
  #        run: npm run test:e2e
  #        env:
  #          AUTH_SECRET: test-secret-key-for-e2e-testing
  #          AUTH_TRUST_HOST: true
  #          NODE_ENV: test
  #          GOOGLE_CLIENT_ID: test-client-id
  #          GOOGLE_CLIENT_SECRET: test-client-secret
  #          DATABASE_URL: file:./test.db
  #
  #      - name: Upload test results
  #        uses: actions/upload-artifact@v4
  #        if: failure()
  #        with:
  #          name: playwright-report
  #          path: playwright-report/
  #          retention-days: 30

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test-e2e
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --config .audit-ci.json
        continue-on-error: true

  cloudflare-validation:
    name: Cloudflare Workers Validation
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Validate Wrangler configuration
        run: wrangler whoami || echo "Wrangler not authenticated (expected for PR checks)"

      - name: Check Wrangler configuration syntax
        run: wrangler pages project list || echo "Configuration check completed"

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: cloudflare-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || echo "Some dependencies are outdated"

      - name: Check for unused dependencies
        run: npx depcheck || echo "Dependency check completed"

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint-and-format,
        type-check,
        build-check,
        test-e2e,
        security-check,
        cloudflare-validation,
        dependency-check,
      ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: PR Status Summary
        run: |
          echo "## Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cloudflare | ${{ needs.cloudflare-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
